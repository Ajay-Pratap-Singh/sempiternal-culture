{"version":3,"sources":["components/Navbar/LinksList/LinkItem.js","components/Navbar/LinksList/index.js","components/Navbar/index.js","components/Link.js","components/Card.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["StyledLink","styled","NavLink","attrs","exact","LinkItem","props","to","url","children","StyledUl","ul","LinksList","StyledNav","nav","Navbar","Link","a","StyledCard","article","Heading","h3","Content","p","Card","imgSrc","src","alt","title","Container","div","Home","MainContainer","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6hBAIA,IAAMA,EAAYC,YAAOC,KAASC,MAAM,CAACC,OAAM,GAA7BH,CAAF,KAYD,SAASI,EAASC,GAC7B,OAAQ,4BACJ,kBAACN,EAAD,CAAYO,GAAID,EAAME,KAAMF,EAAMG,W,mNCd1C,IAAMC,EAAWT,IAAOU,GAAV,KASC,SAASC,EAAUN,GAC9B,OAAQ,kBAACI,EAAD,KACJ,kBAACL,EAAD,CAAUG,IAAI,KAAd,QACA,kBAACH,EAAD,CAAUG,IAAI,eAAd,cACA,kBAACH,EAAD,CAAUG,IAAI,SAAd,cACA,kBAACH,EAAD,CAAUG,IAAI,WAAd,UACA,kBAACH,EAAD,CAAUG,IAAI,UAAd,SACA,kBAACH,EAAD,CAAUG,IAAI,YAAd,Y,wVChBR,IAAMK,EAAYZ,IAAOa,IAAV,KAcA,SAASC,EAAOT,GAC3B,OAAQ,kBAACO,EAAD,KACJ,kBAACD,EAAD,O,0KCjBR,IAKeI,EALHf,YAAOgB,IAAPhB,CAAF,K,igBCCV,IAAMiB,EAAajB,IAAOkB,QAAV,KAMVC,EAAUnB,IAAOoB,GAAV,IAGPL,GAMAM,EAAUrB,IAAOsB,EAAV,KAME,SAASC,EAAKlB,GACzB,OAAQ,kBAACY,EAAD,KACJZ,EAAMmB,OAAO,kBAAC,EAAD,CAAMlB,GAAI,SACnB,yBAAKmB,IAAKpB,EAAMmB,OAAQE,IAAI,UACxB,KACR,kBAACP,EAAD,KACI,kBAAC,EAAD,CAAMb,GAAI,SAAUD,EAAMsB,QAE9B,kBAACN,EAAD,KACKhB,EAAMG,W,0FC9BnB,IAAMoB,EAAY5B,IAAO6B,IAAV,KAIA,SAASC,IACpB,OACI,kBAACF,EAAD,KACI,kBAACL,EAAD,CAAMI,MAAM,cAAZ,gN,wFCLZ,IAAMI,EAAc/B,IAAO6B,IAAR,KAiBJG,MAbf,WACE,OACE,kBAACD,EAAD,KACE,kBAACjB,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,IAAI9B,OAAK,GACnB,kBAAC2B,EAAD,UCJUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1020aeb5.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst StyledLink= styled(NavLink).attrs({exact:true})`\r\n    text-decoration:none;\r\n    color: rgba(255, 255, 255, 0.6);\r\n    line-height:2.9rem;\r\n    transition: all 0.3s ease-in-out;\r\n    &:hover,\r\n    &.active {\r\n        color: rgba(255, 255, 255, 1) \r\n    }\r\n  }\r\n`\r\n\r\nexport default function LinkItem(props){\r\n    return (<li>\r\n        <StyledLink to={props.url}>{props.children}</StyledLink>\r\n    </li>);\r\n}","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport LinkItem from './LinkItem'\r\n\r\nconst StyledUl = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: \"Heebo\", sans-serif;\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n`\r\n\r\nexport default function LinksList(props){\r\n    return (<StyledUl>\r\n        <LinkItem url='/'>Home</LinkItem>\r\n        <LinkItem url='/categories'>Categories</LinkItem>\r\n        <LinkItem url='/blog'>Blog Posts</LinkItem>\r\n        <LinkItem url='/styles'>Styles</LinkItem>\r\n        <LinkItem url='/about'>About</LinkItem>\r\n        <LinkItem url='/contact'>Contact</LinkItem>\r\n    </StyledUl>);\r\n}","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport LinksList from './LinksList/'\r\n\r\nconst StyledNav = styled.nav`\r\n    z-index: 100;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    min-height:100vh;\r\n    width: 300px;\r\n    background-color: #151515;\r\n    padding-top: 6.4rem;\r\n    padding-right: 3.2rem;\r\n    padding-left: 4.4rem;\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n`\r\n\r\nexport default function Navbar(props){\r\n    return (<StyledNav>\r\n        <LinksList/>\r\n    </StyledNav>);\r\n}","import styled from 'styled-components'\r\nimport {Link as a} from 'react-router-dom'\r\n\r\nconst Link= styled(a)`\r\n    color: #33998a;\r\n    text-decoration: none;\r\n    transition: all 0.3s ease-in-out;\r\n`\r\nexport default Link;","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport Link from './Link'\r\n\r\nconst StyledCard = styled.article`\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    background-color: #FFFFFF;\r\n    max-width:20vw;\r\n`\r\nconst Heading = styled.h3`\r\n    font-family: 'Heebo', sans-serif;\r\n    font-weight: 400;\r\n    ${Link}{\r\n        color: rgba(0, 0, 0, 1);\r\n\r\n    }\r\n`\r\n\r\nconst Content = styled.p`\r\n    font-size: 1.7rem;\r\n    line-height: 1.882;\r\n    color: rgba(0, 0, 0, 0.5);\r\n`\r\n\r\nexport default function Card(props){\r\n    return (<StyledCard>\r\n       {props.imgSrc?<Link to={\"/blog\"}>\r\n            <img src={props.imgSrc} alt=\"Blog\"/>\r\n        </Link>:null}\r\n        <Heading>\r\n            <Link to={\"/blog\"}>{props.title}</Link>\r\n        </Heading>\r\n        <Content>\r\n            {props.children}\r\n        </Content>\r\n    </StyledCard>);\r\n}","import React from 'react';\r\nimport Card from './Card';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    padding:2rem;\r\n`\r\n\r\nexport default function Home(){\r\n    return(\r\n        <Container>\r\n            <Card title=\"Card Title\">\r\n                Lorem ipsum Sed eiusmod esse aliqua sed incididunt aliqua incididunt mollit id et sit proident dolor nulla sed commodo est ad minim elit reprehenderit nisi officia aute incididunt velit sint in aliqua...\r\n            </Card>\r\n        </Container>\r\n    );\r\n}","import React from 'react';\nimport Navbar from './components/Navbar/';\nimport {Switch, Route} from 'react-router-dom';\nimport Home from './components/Home';\nimport styled from 'styled-components';\n\nconst MainContainer=styled.div`\n  display:flex;\n`\n\nfunction App() {\n  return (\n    <MainContainer>\n      <Navbar/>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Home/>\n        </Route>\n      </Switch>\n    </MainContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}